{"version":3,"sources":["IMG_20181226_122904.jpg","grid.js","Profile.js","login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","className","Profile","src","pic","alt","Login","id","type","placeholder","to","App","path","component","login","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iD,yOCoD5BC,MAhDf,WAEI,OAEI,yBAAKC,UAAU,eACf,wBAAIA,UAAU,YACZ,4BACE,yBAAKA,UAAU,qBAEb,yBAAKA,UAAU,YACb,qCACA,+BAIN,4BACE,yBAAKA,UAAU,qBAEb,yBAAKA,UAAU,YACb,qCACA,+BAIN,4BACE,yBAAKA,UAAU,qBAEb,yBAAKA,UAAU,YACb,qCACA,+BAIN,4BACE,yBAAKA,UAAU,qBAEb,yBAAKA,UAAU,YACb,qCACA,kCCdDC,MAxBf,WAEI,OACJ,yBAAKD,UAAU,WACZ,wBAAIA,UAAU,YAAd,YACH,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,MAAME,IAAKC,IAAKC,IAAI,MAEnC,yBAAKJ,UAAU,WACX,sCACT,uBAAGA,UAAU,OAAb,4CAIA,6BACG,kBAAC,EAAD,CAAMA,UAAU,U,eCOPK,MAxBf,WAKE,OACI,yBAAKL,UAAU,SACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,UACb,wBAAIA,UAAU,aAAaM,GAAG,UAA9B,aACA,yBAAKN,UAAU,eACb,2BAAOO,KAAK,OAAOP,UAAU,QAAQQ,YAAY,SACjD,2BAAOD,KAAK,QAAQP,UAAU,QAAQQ,YAAY,UAClD,2BAAOD,KAAK,WAAWP,UAAU,QAAQQ,YAAY,cAEvD,kBAAC,IAAD,CAAMC,GAAG,WAAWT,UAAU,QAA9B,IAAsC,4BAAQA,UAAU,cAAlB,c,OCCjCU,MAdf,WAEE,OACE,yBAAKV,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQW,KAAK,IAAIC,UAAWC,IACxB,kBAAC,IAAD,CAAOC,OAAK,EAACH,KAAK,WAAWC,UAAWX,QCDhCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d64c971a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_20181226_122904.3e01f9c9.jpg\";","import React from 'react';\r\nimport \"./grid.css\"\r\n\r\n\r\nfunction Grid()\r\n{\r\n    return(\r\n    \r\n        <div className=\"xop-section\">\r\n        <ul className=\"xop-grid\">\r\n          <li>\r\n            <div className=\"xop-box xop-img-1\">\r\n            \r\n              <div className=\"xop-info\">\r\n                <h3>Photo</h3>\r\n                <p></p>\r\n              </div>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"xop-box xop-img-2\">\r\n              \r\n              <div className=\"xop-info\">\r\n                <h3>Photo</h3>\r\n                <p></p>\r\n              </div>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"xop-box xop-img-3\">\r\n             \r\n              <div className=\"xop-info\">\r\n                <h3>Photo</h3>\r\n                <p></p>\r\n              </div>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"xop-box xop-img-4\">\r\n              \r\n              <div className=\"xop-info\">\r\n                <h3>Photo</h3>\r\n                <p></p>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport \"./profile.css\";\r\nimport pic from \"./IMG_20181226_122904.jpg\";\r\nimport Grid from \"./grid\";\r\nfunction Profile()\r\n{\r\n    return(\r\n<div className=\"profile\">\r\n   <h1 className=\"username\">Aadityan</h1>\r\n<div className=\"container\">\r\n    <div className=\"card\">\r\n        <div className=\"imgbx\">\r\n        <img className=\"pic\" src={pic} alt=\"\"/>\r\n        </div>\r\n        <div className=\"content\">\r\n            <h2>Age 21</h2>\r\n   <p className=\"bio\">\"After all, tomorrow is another day!\"</p>\r\n   </div>\r\n   </div>\r\n   </div>\r\n   <div>\r\n      <Grid className=\"gd\"/>\r\n   </div>\r\n</div>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport  './login.css';\r\nimport { Link} from 'react-router-dom';\r\n\r\nfunction Login()\r\n{\r\n    // const change=()=>{\r\n    //    return <Link to=\"/profile\"/>\r\n    // };\r\n  return (\r\n      <div className=\"login\">\r\n        <div className=\"form-structor\">\r\n        <div className=\"signup\">\r\n          <h2 className=\"form-title\" id=\"signup\">TRAP DATE</h2>\r\n          <div className=\"form-holder\">\r\n            <input type=\"text\" className=\"input\" placeholder=\"Name\" />\r\n            <input type=\"email\" className=\"input\" placeholder=\"Email\" />\r\n            <input type=\"password\" className=\"input\" placeholder=\"Password\" />\r\n          </div>\r\n          <Link to=\"/profile\" className=\"link\"> <button className=\"submit-btn\">LOGIN</button></Link>\r\n          \r\n        </div>\r\n       \r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport Profile from './Profile';\nimport login from './login';\n// import './App.css';\nimport{Route,BrowserRouter as Router,Switch}from \"react-router-dom\";\n\nfunction App() {\n \n  return (\n    <div className=\"app\">\n    <Router>\n      <Switch>\n        <Route  path=\"/\" component={login}/>\n            <Route exact path=\"/profile\" component={Profile}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
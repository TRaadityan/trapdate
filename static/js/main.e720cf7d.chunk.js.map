{"version":3,"sources":["IMG_20181226_122904.jpg","items.js","show.js","Profile.js","login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","breakPoints","width","itemsToShow","Show","className","Profile","src","pic","alt","Login","id","type","placeholder","to","App","exact","path","component","login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iD,uvBCG5BC,M,KAAAA,EAAOC,IAAtB,KCIMC,G,MAAc,CAClB,CAAEC,MAAO,EAAGC,YAAa,GACzB,CAAED,MAAO,IAAKC,YAAa,GAC3B,CAAED,MAAO,IAAKC,YAAa,GAC3B,CAAED,MAAO,KAAMC,YAAa,KAwBfC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAUA,UAAU,WAAWJ,YAAaA,GAC1C,kBAAC,EAAD,YACA,kBAAC,EAAD,YACA,kBAAC,EAAD,cACA,kBAAC,EAAD,aACA,kBAAC,EAAD,aACA,kBAAC,EAAD,YACA,kBAAC,EAAD,cACA,kBAAC,EAAD,kBCMKK,MA1Bf,WAEI,OACJ,yBAAKD,UAAU,WACZ,wBAAIA,UAAU,YAAd,YACH,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,MAAME,IAAKC,IAAKC,IAAI,MAEnC,yBAAKJ,UAAU,WACX,sCACT,uBAAGA,UAAU,OAAb,4CAIA,6BAGH,kBAAC,EAAD,CAAMA,UAAU,W,gBCCDK,MAtBf,WAGE,OACI,yBAAKL,UAAU,SACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,UACb,wBAAIA,UAAU,aAAaM,GAAG,UAA9B,aACA,yBAAKN,UAAU,eACb,2BAAOO,KAAK,OAAOP,UAAU,QAAQQ,YAAY,SACjD,2BAAOD,KAAK,QAAQP,UAAU,QAAQQ,YAAY,UAClD,2BAAOD,KAAK,WAAWP,UAAU,QAAQQ,YAAY,cAEvD,kBAAC,IAAD,CAAMC,GAAG,WAAWT,UAAU,QAA9B,IAAsC,4BAAQA,UAAU,cAAlB,c,OCGjCU,MAdf,WAEE,OACE,yBAAKV,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,aAAaC,UAAWC,IACtC,kBAAC,IAAD,CAAQH,OAAK,EAACC,KAAK,WAAWC,UAAWZ,QCDjCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e720cf7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_20181226_122904.3e01f9c9.jpg\";","\r\nimport styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 250px;\r\n  width: 100%;\r\n  background-color: #111111;\r\n  border: 2px solid #FFD700;\r\n  box-shadow: 0 5px 10px 0 #FFD700 inset ,0 5px 10px 0 #FFD700,\r\n                0 5px 10px 0 #FFD700 inset ,0 5px 10px 0 #FFD700;\r\n  border-radius: 50px;\r\n  text-shadow: 0 0 10px #FFD700,0 0 5px #111111,0 0 120px #FFD700;\r\n  color: #FFD700;\r\n  margin: 0 15px;\r\n  font-size: 3em;\r\n`;\r\n\r\n","import React from \"react\";\r\n\r\nimport Carousel from \"react-elastic-carousel\";\r\nimport Item from \"./items\";\r\nimport \"./styles.css\";\r\n\r\n\r\nconst breakPoints = [\r\n  { width: 1, itemsToShow: 1 },\r\n  { width: 550, itemsToShow: 2 },\r\n  { width: 768, itemsToShow: 3 },\r\n  { width: 1200, itemsToShow: 4 },\r\n];\r\n\r\nfunction Show() {\r\n  return (\r\n    <div className=\"len\">\r\n      <div className=\"App\">\r\n        <Carousel className=\"carousel\" breakPoints={breakPoints}>\r\n          <Item>One</Item>\r\n          <Item>Two</Item>\r\n          <Item>Three</Item>\r\n          <Item>Four</Item>\r\n          <Item>Five</Item>\r\n          <Item>Six</Item>\r\n          <Item>Seven</Item>\r\n          <Item>Eight</Item>\r\n        </Carousel>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Show;","import React from 'react';\r\nimport \"./profile.css\";\r\nimport pic from \"./IMG_20181226_122904.jpg\";\r\nimport Show from './show';\r\n// import Grid from \"./grid\";\r\n// import Slider from './slider'\r\nfunction Profile()\r\n{\r\n    return(\r\n<div className=\"profile\">\r\n   <h1 className=\"username\">Aadityan</h1>\r\n<div className=\"container\">\r\n    <div className=\"card\">\r\n        <div className=\"imgbx\">\r\n        <img className=\"pic\" src={pic} alt=\"\"/>\r\n        </div>\r\n        <div className=\"content\">\r\n            <h2>Age 21</h2>\r\n   <p className=\"bio\">\"After all, tomorrow is another day!\"</p>\r\n   </div>\r\n   </div>\r\n   </div>\r\n   <div>\r\n      {/* <Grid className=\"gd\"/> */}\r\n      {/* <Slider/> */}\r\n<Show className=\"new\"/>\r\n   </div>\r\n</div>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport  './login.css';\r\nimport { Link} from 'react-router-dom';\r\n\r\nfunction Login()\r\n{\r\n  \r\n  return (\r\n      <div className=\"login\">\r\n        <div className=\"form-structor\">\r\n        <div className=\"signup\">\r\n          <h2 className=\"form-title\" id=\"signup\">TRAP DATE</h2>\r\n          <div className=\"form-holder\">\r\n            <input type=\"text\" className=\"input\" placeholder=\"Name\" />\r\n            <input type=\"email\" className=\"input\" placeholder=\"Email\" />\r\n            <input type=\"password\" className=\"input\" placeholder=\"Password\" />\r\n          </div>\r\n          <Link to=\"/profile\" className=\"link\"> <button className=\"submit-btn\">LOGIN</button></Link>\r\n          \r\n        </div>\r\n       \r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport Profile from './Profile';\nimport login from './login';\n// import './App.css';\nimport{Route,BrowserRouter as Router,Switch}from \"react-router-dom\";\n\nfunction App() {\n \n  return (\n    <div className=\"app\">\n    <Router>\n      <Switch>\n        <Route exact path=\"/trapdate/\" component={login}/>\n            <Route  exact path=\"/profile\" component={Profile}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}